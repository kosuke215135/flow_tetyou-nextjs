// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// NextAuth.js標準テーブル構造
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String    @id @default(cuid())
  name          String
  avatar        String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  notes         Note[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

// ノート管理用のテーブル
model Note {
  id           String  @id @default(cuid())
  userId       String
  text         String
  parentNoteId String? // 親ノートのID（深堀りの場合）
  depth        Int     @default(0) // 深堀りの深さ（0=元メモ、1-5=深堀り）
  question     String? // ドゥイットくんからの質問（深堀りノートの場合）
  character    String? // 深堀りに使用したキャラクター ("doitkun" or "listener")、null=深堀りなし

  user     User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  parent   Note?  @relation("NoteTree", fields: [parentNoteId], references: [id], onDelete: Cascade)
  children Note[] @relation("NoteTree")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("notes")
}